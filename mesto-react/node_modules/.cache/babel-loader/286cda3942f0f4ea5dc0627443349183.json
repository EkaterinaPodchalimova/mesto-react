{"ast":null,"code":"class Api {\n  constructor(props) {\n    this._baseUrl = props.baseUrl;\n    this._authorization = props.headers.authorization;\n  }\n\n  getInitialCards() {\n    return fetch(`${this._baseUrl}/cards`, {\n      headers: {\n        authorization: `${this._authorization}`\n      }\n    }).then(res => this._getStatus(res));\n  }\n\n  getUserInformation() {\n    return fetch(`${this._baseUrl}/users/me`, {\n      headers: {\n        authorization: `${this._authorization}`\n      }\n    }).then(res => this._getStatus(res));\n  }\n\n  setUserInformation(_ref) {\n    let {\n      name,\n      about\n    } = _ref;\n    return fetch(`${this._baseUrl}/users/me`, {\n      method: 'PATCH',\n      headers: {\n        authorization: `${this._authorization}`,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        name: `${name}`,\n        about: `${about}`\n      })\n    }).then(res => this._getStatus(res));\n  }\n\n  postNewCard(_ref2) {\n    let {\n      name,\n      link\n    } = _ref2;\n    return fetch(`${this._baseUrl}/cards`, {\n      method: 'POST',\n      headers: {\n        authorization: `${this._authorization}`,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        name: `${name}`,\n        link: `${link}`\n      })\n    }).then(res => this._getStatus(res));\n  }\n\n  deleteCard(id) {\n    return fetch(`${this._baseUrl}/cards/${id}`, {\n      method: 'DELETE',\n      headers: {\n        authorization: `${this._authorization}`,\n        'Content-Type': 'application/json'\n      }\n    }).then(res => this._getStatus(res));\n  }\n\n  addLike(id) {\n    return fetch(`${this._baseUrl}/cards/${id}/likes`, {\n      method: 'PUT',\n      headers: {\n        authorization: `${this._authorization}`,\n        'Content-Type': 'application/json'\n      }\n    }).then(res => this._getStatus(res)).then(res => console.log(res));\n  }\n\n  deleteLike(id) {\n    return fetch(`${this._baseUrl}/cards/${id}/likes`, {\n      method: 'DELETE',\n      headers: {\n        authorization: `${this._authorization}`,\n        'Content-Type': 'application/json'\n      }\n    }).then(res => this._getStatus(res)).then(res => console.log(res));\n  }\n\n  changeLikeCardStatus(id, like) {\n    like ? this.addLike(id) : this.deleteLike(id);\n  }\n\n  editAvatar(avatar) {\n    return fetch(`${this._baseUrl}/users/me/avatar`, {\n      method: 'PATCH',\n      headers: {\n        authorization: `${this._authorization}`,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        avatar: avatar\n      })\n    }).then(res => this._getStatus(res));\n  }\n\n  _getStatus(res) {\n    if (res.ok) {\n      return res.json();\n    }\n\n    return Promise.reject(`Ошибка: ${res.status}`);\n  } // другие методы работы с API\n\n\n}\n\nexport default new Api({\n  baseUrl: 'https://mesto.nomoreparties.co/v1/cohort-47',\n  headers: {\n    authorization: '74bc18a1-28e6-48d3-a590-75a477f90392',\n    'Content-Type': 'application/json'\n  }\n});","map":{"version":3,"names":["Api","constructor","props","_baseUrl","baseUrl","_authorization","headers","authorization","getInitialCards","fetch","then","res","_getStatus","getUserInformation","setUserInformation","name","about","method","body","JSON","stringify","postNewCard","link","deleteCard","id","addLike","console","log","deleteLike","changeLikeCardStatus","like","editAvatar","avatar","ok","json","Promise","reject","status"],"sources":["/Users/ekaterinapodchalimova/Desktop/mesto-react/mesto-react/src/utils/Api.js"],"sourcesContent":["class Api {\n    constructor(props) {\n        this._baseUrl = props.baseUrl;\n        this._authorization = props.headers.authorization;\n    }\n\n    getInitialCards() {\n        return fetch(`${this._baseUrl}/cards`, {\n            headers: {\n                authorization: `${this._authorization}`\n            }\n        })\n            .then(res => this._getStatus(res));\n    }\n\n    getUserInformation() {\n        return fetch(`${this._baseUrl}/users/me`, {\n            headers: {\n                authorization: `${this._authorization}`\n            }\n        })\n            .then(res => this._getStatus(res));\n    }\n\n    setUserInformation({name, about}) {\n        return fetch(`${this._baseUrl}/users/me`, {\n            method: 'PATCH',\n            headers: {\n                authorization: `${this._authorization}`,\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n                name: `${name}`,\n                about: `${about}`\n            })\n        })\n            .then(res => this._getStatus(res));\n    }\n\n    postNewCard({name, link}) {\n        return fetch(`${this._baseUrl}/cards`, {\n            method: 'POST',\n            headers: {\n                authorization: `${this._authorization}`,\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n                name: `${name}`,\n                link: `${link}`\n            })\n        })\n            .then(res => this._getStatus(res));\n    }\n\n    deleteCard(id) {\n        return fetch(`${this._baseUrl}/cards/${id}`, {\n            method: 'DELETE',\n            headers: {\n                authorization: `${this._authorization}`,\n                'Content-Type': 'application/json'\n            }\n        })\n            .then(res => this._getStatus(res));\n    }\n\n    addLike(id) {\n        return fetch(`${this._baseUrl}/cards/${id}/likes`, {\n            method: 'PUT',\n            headers: {\n                authorization: `${this._authorization}`,\n                'Content-Type': 'application/json'\n            }\n        })\n            .then(res => this._getStatus(res))\n            .then(res => console.log(res));\n    }\n\n    deleteLike(id) {\n        return fetch(`${this._baseUrl}/cards/${id}/likes`, {\n            method: 'DELETE',\n            headers: {\n                authorization: `${this._authorization}`,\n                'Content-Type': 'application/json'\n            }\n        })\n            .then(res => this._getStatus(res))\n            .then(res => console.log(res));\n    }\n\n    changeLikeCardStatus(id,like) {\n        like ? this.addLike(id) : this.deleteLike(id);\n    }\n\n    editAvatar(avatar) {\n        return fetch(`${this._baseUrl}/users/me/avatar`, {\n            method: 'PATCH',\n            headers: {\n                authorization: `${this._authorization}`,\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n                avatar: avatar\n            })\n        })\n            .then(res => this._getStatus(res));\n    }\n\n    _getStatus(res) {\n        if (res.ok) {\n            return res.json();\n        }\n        return Promise.reject(`Ошибка: ${res.status}`);\n    }\n\n// другие методы работы с API\n}\n\nexport default new Api({\n    baseUrl: 'https://mesto.nomoreparties.co/v1/cohort-47',\n    headers: {\n        authorization: '74bc18a1-28e6-48d3-a590-75a477f90392',\n        'Content-Type': 'application/json'\n    }\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}